{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "docker_manager = <utils.docker.docker_utils.DockerManager object at 0x000002669CFA22F0>\n\n    @pytest.fixture(scope='session', autouse=True)\n    # @pytest.mark.dependency(depends=[\"docker_manager\"])\n    def setup_docker_containers(docker_manager):\n        \"\"\"\n        Fixture to start all containers except the containers that have a related simulator.\n        \"\"\"\n        print(\"Purge all queues for session...\")\n>       Simulator.purge_all_queues(\n            ['Ordering', 'Basket', 'Catalog', 'Payment', 'Ordering.signalrhub', 'Webhooks', 'BackgroundTasks'])\n\ntests\\suites\\conftest.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsimulators\\simulator.py:96: in purge_all_queues\n    with RabbitMQ() as mq:\nutils\\rabbitmq\\rabbitmq_send.py:19: in __enter__\n    self.connect()\nutils\\rabbitmq\\rabbitmq_send.py:26: in connect\n    self.connection = pika.BlockingConnection(\nC:\\Users\\ofris\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pika\\adapters\\blocking_connection.py:360: in __init__\n    self._impl = self._create_connection(parameters, _impl_class)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <BlockingConnection impl=None>, configs = (<ConnectionParameters host=localhost port=5672 virtual_host=/ ssl=False>,)\nimpl_class = <class 'pika.adapters.select_connection.SelectConnection'>\n\n    def _create_connection(self, configs, impl_class):\n        \"\"\"Run connection workflow, blocking until it completes.\n    \n        :param None | pika.connection.Parameters | sequence configs: Connection\n            parameters instance or non-empty sequence of them.\n        :param None | SelectConnection impl_class: for tests/debugging only;\n            implementation class;\n    \n        :rtype: impl_class\n    \n        :raises: exception on failure\n        \"\"\"\n    \n        if configs is None:\n            configs = (pika.connection.Parameters(),)\n    \n        if isinstance(configs, pika.connection.Parameters):\n            configs = (configs,)\n    \n        if not configs:\n            raise ValueError('Expected a non-empty sequence of connection '\n                             'parameters, but got {!r}.'.format(configs))\n    \n        # Connection workflow completion args\n        #   `result` may be an instance of connection on success or exception on\n        #   failure.\n        on_cw_done_result = _CallbackResult(\n            namedtuple('BlockingConnection_OnConnectionWorkflowDoneArgs',\n                       'result'))\n    \n        impl_class = impl_class or select_connection.SelectConnection\n    \n        ioloop = select_connection.IOLoop()\n    \n        ioloop.activate_poller()\n        try:\n            impl_class.create_connection(\n                configs,\n                on_done=on_cw_done_result.set_value_once,\n                custom_ioloop=ioloop)\n    \n            while not on_cw_done_result.ready:\n                ioloop.poll()\n                ioloop.process_timeouts()\n    \n            if isinstance(on_cw_done_result.value.result, BaseException):\n                error = on_cw_done_result.value.result\n                LOGGER.error('Connection workflow failed: %r', error)\n>               raise self._reap_last_connection_workflow_error(error)\nE               pika.exceptions.AMQPConnectionError\n\nC:\\Users\\ofris\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pika\\adapters\\blocking_connection.py:451: AMQPConnectionError\n", "test_name": "test_user_can_submit_an_order", "rerun": "0"}}, "suite_name": "tests/suites/test_order_management_suite.py"}}}, "date": "March 17, 2023", "start_time": 1679013660.3827791, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}