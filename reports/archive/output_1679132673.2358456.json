{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture()\n    # @pytest.mark.dependency(depends=[\"docker_manager\"])\n    def setup_docker_containers():\n        \"\"\"\n        Fixture to start all containers except the containers that have a representative simulator.\n        \"\"\"\n        docker_manager = DockerManager()\n        print(\"Setting up docker containers...\")\n    \n        representative_simulators_containers = [\"eshop/catalog.api:linux-latest\", \"eshop/payment.api:linux-latest\",\n                                 \"eshop/basket.api:linux-latest\"]\n    \n        # Start all containers, only if the current running containers amount is invalid.\n        if len(docker_manager.running_containers) != len(docker_manager.containers) - len(representative_simulators_containers):\n            docker_manager.start_all_containers()\n            sleep(3)\n            # Verify all containers are up and running\n            docker_manager.start_all_containers()\n    \n            # Stop all containers that have a related simulator\n            for container_name in representative_simulators_containers:\n                docker_manager.stop(container_name)\n    \n            sleep(10)\n    \n>           docker_manager.force_start(\"bcb150ac21d645d8979fbcb7c9e6891c6536506617f94faad5af05e45ee66886\")\n\ntests\\suites\\conftest.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils\\docker\\docker_utils.py:17: in force_start\n    while self.get_container_status(container_id) != 'Running' and timeout > 0:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.docker.docker_utils.DockerManager object at 0x0000023118E4A620>, container_name = 'bcb150ac21d645d8979fbcb7c9e6891c6536506617f94faad5af05e45ee66886'\n\n    def get_container_status(self, container_name):\n>       return self.cli.containers.get(container_name).status()\nE       TypeError: 'str' object is not callable\n\nutils\\docker\\docker_utils.py:35: TypeError\n", "test_name": "test_mss", "rerun": "0"}}, "suite_name": "tests/suites/test_order_management_suite.py"}}}, "date": "March 18, 2023", "start_time": 1679132395.7074077, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}